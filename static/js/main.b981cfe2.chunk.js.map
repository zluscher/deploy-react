{"version":3,"sources":["App.js","index.js"],"names":["vec","THREE","Model","open","hinge","props","group","useRef","useGLTF","nodes","materials","useState","hovered","setHovered","useEffect","document","body","style","cursor","useFrame","state","t","clock","getElapsedTime","camera","position","lerp","set","lookAt","current","rotation","x","Math","cos","y","sin","z","ref","onPointerOver","e","stopPropagation","onPointerOut","dispose","three","PI","material","aluminium","geometry","keys","keyboard","trackpad","touchbar","App","setOpen","useSpring","Number","main","background","to","h1","opacity","transform","o","dpr","fov","pointLight","intensity","color","fallback","onClick","Environment","preset","ContactShadows","width","height","blur","far","ReactDOM","render","getElementById"],"mappings":"gRAQMA,EAAM,IAAIC,UAEhB,SAASC,EAAT,GAA2C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAUC,EAAS,iBAClCC,EAAQC,mBAEd,EAA6BC,YAAQ,kBAA7BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAEf,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAcA,OAbAC,qBAAU,WAAYC,SAASC,KAAKC,MAAMC,OAASN,EAAU,UAAY,SAAS,CAACA,IAEnFO,aAAS,SAACC,GACR,IAAMC,EAAID,EAAME,MAAMC,iBACtBH,EAAMI,OAAOC,SAASC,KAAK1B,EAAI2B,IAAI,EAAG,EAAGxB,GAAQ,IAAM,IAAK,IAC5DiB,EAAMI,OAAOI,OAAO,EAAG,EAAG,GAC1BtB,EAAMuB,QAAQC,SAASC,EAAI9B,YAAgByB,KAAKpB,EAAMuB,QAAQC,SAASC,EAAG5B,EAAO6B,KAAKC,IAAIZ,EAAI,GAAK,EAAI,IAAO,EAAG,IACjHf,EAAMuB,QAAQC,SAASI,EAAIjC,YAAgByB,KAAKpB,EAAMuB,QAAQC,SAASI,EAAG/B,EAAO6B,KAAKG,IAAId,EAAI,GAAK,EAAI,EAAG,IAC1Gf,EAAMuB,QAAQC,SAASM,EAAInC,YAAgByB,KAAKpB,EAAMuB,QAAQC,SAASM,EAAGjC,EAAO6B,KAAKG,IAAId,EAAI,GAAK,EAAI,EAAG,IAC1Gf,EAAMuB,QAAQJ,SAASS,EAAIjC,YAAgByB,KAAKpB,EAAMuB,QAAQJ,SAASS,EAAG/B,IAAS,EAAI6B,KAAKG,IAAId,IAAM,GAAK,IAAK,OAKhH,gDACEgB,IAAK/B,GACDD,GAFN,IAGEiC,cAAe,SAACC,GAAD,OAAQA,EAAEC,kBAAmB3B,GAAW,IACvD4B,aAAc,SAACF,GAAD,OAAO1B,GAAW,IAChC6B,QAAS,KALX,UAME,cAACC,EAAA,EAAMrC,MAAP,CAAa,aAAYF,EAAOqB,SAAU,CAAC,GAAI,IAAM,KAArD,SACE,wBAAOA,SAAU,CAAC,EAAG,MAAO,KAAOK,SAAU,CAACE,KAAKY,GAAK,EAAG,EAAG,GAA9D,UACE,sBAAMC,SAAUnC,EAAUoC,UAAWC,SAAUtC,EAAK,QAAYsC,WAChE,sBAAMF,SAAUnC,EAAU,aAAcqC,SAAUtC,EAAK,UAAcsC,WACrE,sBAAMF,SAAUnC,EAAU,cAAeqC,SAAUtC,EAAK,UAAcsC,gBAG1E,sBAAMF,SAAUnC,EAAUsC,KAAMD,SAAUtC,EAAMwC,SAASF,SAAUtB,SAAU,CAAC,KAAM,EAAG,QACvF,wBAAOA,SAAU,CAAC,GAAI,GAAK,MAA3B,UACE,sBAAMoB,SAAUnC,EAAUoC,UAAWC,SAAUtC,EAAK,QAAYsC,WAChE,sBAAMF,SAAUnC,EAAUwC,SAAUH,SAAUtC,EAAK,UAAcsC,cAEnE,sBAAMF,SAAUnC,EAAUyC,SAAUJ,SAAUtC,EAAM0C,SAASJ,SAAUtB,SAAU,CAAC,GAAI,IAAM,WAKnF,SAAS2B,IAEtB,MAAwBzC,oBAAS,GAAjC,mBAAOR,EAAP,KAAakD,EAAb,KAEMhD,EAAQiD,oBAAU,CAAEnD,KAAMoD,OAAOpD,KACvC,OACE,eAAC,IAAIqD,KAAL,CAAUvC,MAAO,CAAEwC,WAAYpD,EAAMF,KAAKuD,GAAG,CAAC,EAAG,GAAI,CAAC,UAAW,aAAjE,UACE,cAAC,IAAIC,GAAL,CAAQ1C,MAAO,CAAE2C,QAASvD,EAAMF,KAAKuD,GAAG,CAAC,EAAG,GAAI,CAAC,EAAG,IAAKG,UAAWxD,EAAMF,KAAKuD,IAAG,SAACI,GAAD,iCAA+B,GAAJA,EAAS,IAApC,aAAlF,mBAGA,eAAC,IAAD,CAAQC,IAAK,CAAC,EAAG,GAAIvC,OAAQ,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIuC,IAAK,IAAzD,UACE,cAACrB,EAAA,EAAMsB,WAAP,CAAkBxC,SAAU,CAAC,GAAI,GAAI,IAAKyC,UAAW,IAAKC,MAAO9D,EAAMF,KAAKuD,GAAG,CAAC,EAAG,GAAI,CAAC,UAAW,cACnG,eAAC,WAAD,CAAUU,SAAU,KAApB,UACE,uBAAOtC,SAAU,CAAC,EAAGE,KAAKY,GAAI,GAAIyB,QAAS,SAAC9B,GAAD,OAAQA,EAAEC,kBAAmBa,GAASlD,IAAjF,SACE,cAACD,EAAD,CAAOC,KAAMA,EAAMC,MAAOC,EAAMF,KAAKuD,GAAG,CAAC,EAAG,GAAI,CAAC,OAAQ,WAE3D,cAACY,EAAA,EAAD,CAAaC,OAAO,YAEtB,cAACC,EAAA,EAAD,CAAgB,aAAYxC,KAAKY,GAAK,EAAGnB,SAAU,CAAC,GAAI,IAAK,GAAImC,QAAS,GAAKa,MAAO,GAAIC,OAAQ,GAAIC,KAAM,EAAGC,IAAK,Y,MClE5HC,IAASC,OAAO,cAAC1B,EAAD,IAASrC,SAASgE,eAAe,W","file":"static/js/main.b981cfe2.chunk.js","sourcesContent":["import * as THREE from 'three'\r\nimport React, { Suspense, useEffect, useRef, useState } from 'react'\r\nimport { Canvas, useFrame } from '@react-three/fiber'\r\nimport { Environment, useGLTF, ContactShadows } from '@react-three/drei'\r\nimport { useSpring } from '@react-spring/core'\r\nimport { a as three } from '@react-spring/three'\r\nimport { a as web } from '@react-spring/web'\r\n\r\nconst vec = new THREE.Vector3()\r\n\r\nfunction Model({ open, hinge, ...props }) {\r\n  const group = useRef()\r\n  // Load model\r\n  const { nodes, materials } = useGLTF('/mac-draco.glb')\r\n  // Take care of cursor state on hover\r\n  const [hovered, setHovered] = useState(false)\r\n  useEffect(() => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'), [hovered])\r\n  // Make it float in the air when it's opened\r\n  useFrame((state) => {\r\n    const t = state.clock.getElapsedTime()\r\n    state.camera.position.lerp(vec.set(0, 0, open ? -24 : -32), 0.1)\r\n    state.camera.lookAt(0, 0, 0)\r\n    group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, open ? Math.cos(t / 2) / 8 + 0.25 : 0, 0.1)\r\n    group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, open ? Math.sin(t / 4) / 4 : 0, 0.1)\r\n    group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, open ? Math.sin(t / 4) / 4 : 0, 0.1)\r\n    group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, open ? (-2 + Math.sin(t)) / 3 : -4.3, 0.1)\r\n  })\r\n  // The view was auto-generated by: https://github.com/pmndrs/gltfjsx\r\n  // Events and spring animations were added afterwards\r\n  return (\r\n    <group\r\n      ref={group}\r\n      {...props}\r\n      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}\r\n      onPointerOut={(e) => setHovered(false)}\r\n      dispose={null}>\r\n      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>\r\n        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>\r\n          <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />\r\n          <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />\r\n          <mesh material={materials['screen.001']} geometry={nodes['Cube008_2'].geometry} />\r\n        </group>\r\n      </three.group>\r\n      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />\r\n      <group position={[0, -0.1, 3.39]}>\r\n        <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />\r\n        <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />\r\n      </group>\r\n      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />\r\n    </group>\r\n  )\r\n}\r\n\r\nexport default function App() {\r\n  // This flag controls open state, alternates between true & false\r\n  const [open, setOpen] = useState(false)\r\n  // We turn this into a spring animation that interpolates between 0 and 1\r\n  const props = useSpring({ open: Number(open) })\r\n  return (\r\n    <web.main style={{ background: props.open.to([0, 1], ['#f0f0f0', '#d25578']) }}>\r\n      <web.h1 style={{ opacity: props.open.to([0, 1], [1, 0]), transform: props.open.to((o) => `translate3d(-50%,${o * 50 - 100}px,0)`) }}>\r\n        hello\r\n      </web.h1>\r\n      <Canvas dpr={[1, 2]} camera={{ position: [0, 0, 0], fov: 35 }}>\r\n        <three.pointLight position={[10, 10, 10]} intensity={1.5} color={props.open.to([0, 1], ['#f0f0f0', '#d25578'])} />\r\n        <Suspense fallback={null}>\r\n          <group rotation={[0, Math.PI, 0]} onClick={(e) => (e.stopPropagation(), setOpen(!open))}>\r\n            <Model open={open} hinge={props.open.to([0, 1], [1.575, -0.425])} />\r\n          </group>\r\n          <Environment preset=\"city\" />\r\n        </Suspense>\r\n        <ContactShadows rotation-x={Math.PI / 2} position={[0, -4.5, 0]} opacity={0.4} width={20} height={20} blur={2} far={4.5} />\r\n      </Canvas>\r\n    </web.main>\r\n  )\r\n}\r\n","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\nimport './styles.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}